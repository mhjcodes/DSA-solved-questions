class Solution {
public:
    bool solve(int target, int n, int i, vector<int> &nums, vector<vector<int>> &dp){
        // base case
        if(target < 0)
        return 0;
        if(target == 0)
        return 1;
        if(i == n)
        return 0;

        if(dp[i][target] != -1)
        return dp[i][target];

        int incl = solve(target-nums[i], n, i+1, nums, dp);
        int excl = 0 + solve(target, n, i+1, nums, dp);

        dp[i][target] = (incl || excl);
        return dp[i][target];
    }
    bool solveTab(int target, int n, int index, vector<int> &nums, vector<vector<int>> &dp){
    for(int i=0; i<=n; i++)
        dp[i][0] = 1;

        for(int index = n-1; index>=0; index--){
            for(int capacity = 1; capacity<= target; capacity++){
            int incl = 0;
            if(capacity-nums[index] >= 0)
            incl = dp[index+1][capacity-nums[index]];
            int excl = 0 + dp[index+1][capacity];

            dp[index][capacity] = (incl || excl);
            }
        }
        return dp[0][target];
    }
    bool solveOpt(int target, int n, int index, vector<int> &nums){
    vector<int> next(target+1, 0);
    vector<int> curr(target+1, 0);
        next[0] = 1;

        for(int index = n-1; index>=0; index--){
            for(int capacity = 1; capacity<= target; capacity++){
            int incl = 0;
            if(capacity-nums[index] >= 0)
            incl = next[capacity-nums[index]];
            int excl = 0 + next[capacity];

            curr[capacity] = (incl || excl);
            }
            // shift logic
            next = curr;
        }
        return next[target];
    }
    
    bool canPartition(vector<int>& nums) {
        int target = 0;
        int n = nums.size();
        for(int i =0; i<n ; i++)
        target += nums[i];

        if(target & 1)
        return 0;
        
        //vector<vector<int>> dp(n , vector<int>((target/2)+1,-1));
        //return solve(target/2, n, 0, nums, dp);

        //vector<vector<int>> dp(n+1 , vector<int>((target/2)+1, 0));
        //return solveTab(target/2, n, 0, nums, dp);

        return solveOpt(target/2, n, 0, nums);
    }
};
