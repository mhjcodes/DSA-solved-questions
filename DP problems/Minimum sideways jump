class Solution {
public:
    int solve(vector<int>& obs, int pos, int lane, int n, vector<vector<int>> &dp){
        // base case
        if(pos == n-1)
        return 0;

        if(dp[lane][pos] != -1)
        return dp[lane][pos];

        if(obs[pos+1] != lane)
        return solve(obs, pos+1, lane, n, dp);

        else{
            // side jump
            int ans = INT_MAX;
            for(int i=1; i<=3; i++){
                if(lane != i && obs[pos] != i){
                    int temp= 1 + solve(obs, pos, i, n, dp);
                    ans = min(ans, temp);
                }
            }
            dp[lane][pos] = ans;
            return dp[lane][pos];
        }
    }
int solveTab(vector<int> &obstacles) {
        int n = obstacles.size();
        vector<vector<int>> dp(4, vector<int>(obstacles.size(), INT_MAX));

        dp[1][n-1] = 0;
        dp[2][n-1] = 0;
        dp[3][n-1] = 0;

        for (int pos = n - 2; pos >= 0; pos--) {
            for (int lane = 1; lane <= 3; lane++) {
                if (obstacles[pos + 1] != lane) {
                    dp[lane][pos] = dp[lane][pos + 1];
                } 
                else {
                    // Sideways jump
                    int ans = INT_MAX;
                    for (int i = 1; i <= 3; i++) {
                        if (lane != i && obstacles[pos] != i && dp[i][pos+1] != INT_MAX)
                            ans = min(ans, 1 + dp[i][pos+1]);
                    }
                    dp[lane][pos] = ans;
                    }
                }
            }
        return min(dp[2][0], min(1 + dp[1][0], 1 + dp[3][0]));
    }
    int solveOpt(vector<int> &obstacles){
        int n = obstacles.size();       
        vector<int> curr(4, INT_MAX);
        vector<int> next(4, INT_MAX);
        next[1] = 0;
        next[2] = 0;
        next[3] = 0;
        for (int lane = 1; lane <= 3; lane++) {
            for (int pos = n - 2; pos >= 0; pos--) {
                if (obstacles[pos + 1] != lane) {
                    curr[lane] = next[lane];
                } 
                else {
                    // Sideways jump
                    int ans = INT_MAX;
                    for (int i = 1; i <= 3; i++) {
                        if (lane != i && obstacles[pos] != i && next[i] != INT_MAX)
                            ans = min(ans, 1 + next[i]);
                    }
                    curr[lane] = ans;
                    }
                }
                // shift logic
                next = curr;
            }
        return min(next[2], min(1 + next[1], 1 + next[3]));

    }
    int minSideJumps(vector<int>& obstacles) {
        int n = obstacles.size();
       // vector<vector<int>> dp(4, vector<int>(n, -1));     // rows are actually 3, but to avoid index confusing, set as 4
       // return solve(obstacles, 0, 2, n, dp);
        // return solveTab(obstacles);
        return solveOpt(obstacles);
    }
};

