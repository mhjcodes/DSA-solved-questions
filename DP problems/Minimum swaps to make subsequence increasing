class Solution {
public:
    int solve(int i, int n, vector<int> &nums1, vector<int> &nums2, bool swapFlag, vector<vector<int>> &dp){
        // base case
        if(i == n+1)
        return 0;

        if(dp[i][swapFlag] != -1)
        return dp[i][swapFlag];

        int prev1 = nums1[i-1];
        int prev2 = nums2[i-1];

        if(swapFlag)      
        swap(prev1, prev2);

        int ans = INT_MAX;

        // no swap done
        if(nums1[i] > prev1 && nums2[i] > prev2)                      // if this call happen, swap call may or may not happen, coz to route all possible ways
        ans =  min(ans, 0 + solve(i+1, n, nums1, nums2, 0, dp));

        // swap done
        if(nums1[i] > prev2 && nums2[i] > prev1)                      // this call will happen definitely if no swap call failed because of customized test cases
        ans = min(ans, 1 + solve(i+1, n, nums1, nums2, 1, dp));       
    
        dp[i][swapFlag] = ans;
        return dp[i][swapFlag];
    }
    int solveTab(int n, vector<int> &nums1, vector<int> &nums2, bool swapFlag, vector<vector<int>> &dp){
        for(int i = n; i>=1; i--){
            for(int swapFlag= 1; swapFlag>=0 ; swapFlag--){
                int prev1 = nums1[i-1];
                int prev2 = nums2[i-1];

                if(swapFlag)      
                swap(prev1, prev2);

                int ans = INT_MAX;

                // no swap done
                if(nums1[i] > prev1 && nums2[i] > prev2)                      // if this call happen, swap call may or may not happen, coz to route all possible ways
                ans =  min(ans, 0 + dp[i+1][0]);

                // swap done
                if(nums1[i] > prev2 && nums2[i] > prev1)                      // this call will happen definitely if no swap call failed because of customized test cases
                ans = min(ans, 1 + dp[i+1][1]);       
            
                dp[i][swapFlag] = ans;
            }
        }
        return dp[1][0];

    }
    int solveOpt(int n, vector<int> &nums1, vector<int> &nums2, bool swapFlag){
        vector<int> curr(2, 0);
        vector<int> next(2, 0);
        for(int i = n; i>=1; i--){
            for(int swapFlag= 1; swapFlag>=0 ; swapFlag--){
                int prev1 = nums1[i-1];
                int prev2 = nums2[i-1];

                if(swapFlag)      
                swap(prev1, prev2);

                int ans = INT_MAX;

                // no swap done
                if(nums1[i] > prev1 && nums2[i] > prev2)                      // if this call happen, swap call may or may not happen, coz to route all possible ways
                ans =  min(ans, 0 + next[0]);

                // swap done
                if(nums1[i] > prev2 && nums2[i] > prev1)                      // this call will happen definitely if no swap call failed because of customized test cases
                ans = min(ans, 1 + next[1]);       
            
                curr[swapFlag] = ans;
            }
            // shift logic
            next = curr;
        }
        return next[0];

    }
    int minSwap(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size();
        nums1.insert(nums1.begin(), -1);
        nums2.insert(nums2.begin(), -1);
        //vector<vector<int>> dp(n+1, vector<int> (2, -1));
        bool swapFlag = 0;
        //return solve(1, n, nums1, nums2, swapFlag, dp);

        //vector<vector<int>> dp(n+2, vector<int> (2, 0));
        //return solveTab(n, nums1, nums2, swapFlag, dp);

        return solveOpt(n, nums1, nums2, swapFlag);
    }
};
