class Solution {
public:
    int solve(int n, vector<int> &dp, vector<int> &cost){
        // base case
        if(n == 0)
        return cost[0];
        if(n == 1)
        return cost[1];

        if(dp[n] != -1)
        return dp[n];

        dp[n] = min(solve(n-1, dp, cost), solve(n-2, dp, cost)) + cost[n];
        return dp[n];
    }
    int minCostClimbingStairs(vector<int>& cost) {
        // memorisation
        int n = cost.size();
        vector<int> dp(n+1, -1);
        int ans = min(solve (n-1, dp, cost), solve(n-2, dp, cost));
        return ans;

        /*int n = cost.size();
        vector<int> dp(n+1);
        dp[0] = cost[0];
        dp[1] = cost[1];

        for(int i=2; i<n; i++)
        dp[i] = min(dp[i-1], dp[i-2]) + cost[i];         // we dealt with upto n-1

        return min(dp[n-1], dp[n-2]);                    // nth term dealt separately
        */
        
        // space optimisation
        /*int n = cost.size();
        int prev2 = cost[0];
        int prev1 = cost[1];

        for(int i=2; i<n; i++){
            int curr = min(prev2 , prev1) + cost[i];
            // shift logic
            prev2 = prev1;
            prev1 = curr;
        }
        return min(prev1, prev2);
        */
    }

};
