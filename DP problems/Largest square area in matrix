class Solution{
public:
    int solve(vector<vector<int>> &mat, int i, int j, vector<vector<int>> &dp, int &maxi){     // i as row, j as col
        // base case
        if(i >= mat.size() || j >= mat[0].size())
        return 0;
        
        if(dp[i][j] != -1)
        return dp[i][j];
        
        int right = solve(mat, i, j+1, dp, maxi);
        int diag = solve(mat, i+1, j+1, dp, maxi);
        int down = solve(mat, i+1, j, dp, maxi);
        
        if(mat[i][j] == 1){
            
            dp[i][j] = 1+ min(min(right,diag),down);
            maxi = max(maxi, dp[i][j]);
            return dp[i][j];
        }
        else
        return dp[i][j]= 0;
        
    }
    int solveTab(vector<vector<int>> &mat, int &maxi){
        
        int row = mat.size();
        int col = mat[0].size();
        vector<vector<int>> dp(row+1, vector<int>(col+1, -1));

        for(int i= row, j = col; j >= 0; j--)
        dp[i][j] = 0;
        
        for(int j =col, i= row; i>=0; i--)
        dp[i][j] = 0;
        
        for(int i = row-1; i>=0; i--){
            for(int j = col-1; j>=0; j--){
            int right = dp[i][j+1];
            int diag = dp[i+1][j+1];
            int down = dp[i+1][j];
            
            if(mat[i][j] == 1){
                
                dp[i][j] = 1+ min(min(right,diag),down);
                maxi = max(maxi, dp[i][j]);
            }
            else
            dp[i][j]= 0;
            }
        }
        return dp[0][0];
    }
    int solveOpt(vector<vector<int>> &mat, int &maxi){
        
        int row = mat.size();
        int col = mat[0].size();

        vector<int> nxt(col+1, 0);
        vector<int> curr(col+1, 0);

        for(int i = row-1; i>=0; i--){
            for(int j = col-1; j>=0; j--){
            int right = curr[j+1];
            int diag = nxt[j+1];
            int down = nxt[j];
            
            if(mat[i][j] == 1){
                
                curr[j] = 1+ min(min(right,diag),down);
                maxi = max(maxi, curr[j]);
            }
            else
            curr[j]= 0;
            }
            // shift logic
            nxt = curr;
        }
        return nxt[0];
    }
    int maxSquare(int n, int m, vector<vector<int>> mat){
        /*vector<vector<int>> dp(n, vector<int>(m, -1));
        int maxi = 0;
        solve(mat, 0, 0, dp, maxi);
        return maxi;
        */
        int maxi =0;
        //solveTab(mat, maxi);
        solveOpt(mat, maxi);
        return maxi;  
    }
};
