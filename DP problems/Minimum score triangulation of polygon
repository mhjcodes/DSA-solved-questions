class Solution {
public:
    int solve(vector<int>& values, int start, int end, vector<vector<int>> &dp){
        // base case
        if(start+1 == end)              // line
        return 0;

        if(dp[start][end] != -1)
        return dp[start][end];

        int ans = INT_MAX;
        for(int k= start+1; k < end; k++){
            int temp = values[start]*values[k]*values[end] + solve (values, start, k,dp) + solve(values, k, end,dp);
            ans = min(temp, ans);
        }
        dp[start][end] = ans;
        return dp[start][end];

    }
    int solveTab(vector<int>& values, vector<vector<int>> &dp){
        int n= values.size();
        for(int i = n-1; i>=0; i--){           // i as start
            for(int j= i+2 ; j<n; j++){
            int ans = INT_MAX;
            for(int k= i+1; k < j; k++){
                int temp = values[i]*values[k]*values[j] + dp[i][k] + dp[k][j];
                ans = min(temp, ans);
            }
            dp[i][j] = ans;
            }
        }  
        return dp[0][n-1];              
    }
    int minScoreTriangulation(vector<int>& values) { 
        int n= values.size();
        //vector<vector<int>> dp(n, vector<int>(n, -1));
        //return solve(values, 0, n-1,dp);
        
        vector<vector<int>> dp(n, vector<int>(n, 0));      // for tabulation
        return solveTab(values, dp);
    }
};
// time complexiety here is O(n^3) unlike other problems (O(n^2))
