class Solution {
public:
    int solve(int i, int n, vector<int> &sat, int time, vector<vector<int>> &dp){
        // base case
        if( i > n-1)
        return 0;

        if(dp[i][time] != -1)
        return dp[i][time];

        int incl = (time)*(sat[i]) + solve(i+1, n, sat, time+1, dp);
        int excl = 0*(sat[i]) + solve(i+1, n, sat, time, dp);

        dp[i][time] = max(incl, excl);
        return dp[i][time];
    }
    int solveTab(int n, vector<int> &sat, vector<vector<int>> &dp){
        for(int i =n-1; i>=0; i--){
            for(int time =n; time>=1; time--){
            int incl = (time)*(sat[i]) + dp[i+1][time+1];
            int excl = 0*(sat[i]) + dp[i+1][time];

            dp[i][time] = max(incl, excl);
            }
        }
        return dp[0][1];
    }
    int solveOpt(int n, vector<int> &sat){
        vector<int> curr(n+2, 0);
        vector<int> next(n+2, 0);
        for(int i =n-1; i>=0; i--){
            for(int time =n; time>=1; time--){
            int incl = (time)*(sat[i]) + next[time+1];
            int excl = 0*(sat[i]) + next[time];

            curr[time] = max(incl, excl);
            }
            // shift logic
            next = curr;
        }
        return next[1];
    }
    int solveOptAdv(int n, vector<int> &sat){
        vector<int> curr(n+2, 0);
        for(int i =n-1; i>=0; i--){
            for(int time =1; time<=n; time++){
            int incl = (time)*(sat[i]) + curr[time+1];
            int excl = 0*(sat[i]) + curr[time];

            curr[time] = max(incl, excl);
            }
        }
        return curr[1];
    }
    int maxSatisfaction(vector<int>& satisfaction) {
        int n = satisfaction.size();
        //vector<vector<int>> dp(n, vector<int>(n+1, -1));
        sort(satisfaction.begin(), satisfaction.end());
        //return solve(0, n, satisfaction, 1, dp);

        //vector<vector<int>> dp(n+1, vector<int>(n+2, 0));
        //return solveTab(n, satisfaction, dp);

        //return solveOpt(n, satisfaction);
        return solveOptAdv(n, satisfaction);

        
    }
};
