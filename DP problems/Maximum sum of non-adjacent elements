#include <bits/stdc++.h> 
int solveMem(vector<int> &nums, int n, vector<int> &dp){
    // base case
    if(n < 0)
    return 0;

    if(n == 0)
    return nums[0];

    if(dp[n] != -1)
    return dp[n];


    int incl = solveMem(nums,n-2,dp) + nums[n];
    int excl = solveMem(nums,n-1,dp) + 0;

    dp[n] = max(incl, excl);
    return dp[n];
}
int solveTab(vector<int> &nums, vector<int> &dp){
    int n =nums.size();
    dp[0] = nums[0];
    dp[1] = max(nums[0], nums[1]);     // excluded from loop & written separetely as index becomes -ve, logic is derived from the same
    for(int i=2; i<n; i++){
        int incl = dp[i-2] + nums[i];
        int excl = dp[i-1] + 0;

        dp[i] = max(incl, excl);
    }
    return dp[n-1];
}
int maximumNonAdjacentSum(vector<int> &nums){
   /* int n = nums.size();
    vector<int> dp(n, -1);
    return solveMem(nums, n-1, dp);*/
    
   /* int n= nums.size();         // tabulation
    vector<int> dp(n, -1);
    return solveTab(nums, dp);*/

    // space optimisation
    int n = nums.size();
    int prev2 = nums[0];
    int prev1 = max(nums[0], nums[1]);

    for(int i=2; i<n; i++){
        int incl = prev2 + nums[i];
        int excl = prev1 + 0;

        int curr = max(incl, excl);
        // shift logic
        prev2 = prev1;
        prev1 = curr;
    }
    return prev1;
    
}
