#include<bits/stdc++.h>
int solve(int n, int x, int y, int z, vector<int> &dp){
	// base case
	if(n == 0)
	return 0;

    if(n < 0)
	return INT_MIN;

	if(dp[n] != -1)
	return dp[n];


	int a = solve(n-x, x, y, z, dp) + 1;
	int b = solve(n-y, x, y, z, dp) + 1;
	int c = solve(n-z, x, y, z, dp) + 1;

	dp[n] = max(a, max(b,c));
	return dp[n];
}
int solveTab(int n, int x, int y, int z, vector<int> &dp){
	dp[0] = 0;
	for(int i= 1; i<=n ; i++){
		if(i-x >= 0 && dp[i-x] != INT_MIN)
		dp[i] = max(dp[i], 1+dp[i-x]);
		if(i-y >= 0 && dp[i-y] != INT_MIN)
		dp[i] = max(dp[i], 1+dp[i-y]);
		if(i-z >= 0 && dp[i-z] != INT_MIN)
		dp[i] = max(dp[i], 1+dp[i-z]);
	}
	return dp[n];
}
int cutSegments(int n, int x, int y, int z) {
	// note: you can use x, y, z elements more than one
	/*vector<int> dp(n+1, -1);
	int ans = solve(n, x, y, z, dp);

	if(ans  < 0)            // invalid & 0 cases are handled
	return 0;

	return ans;*/

	// tabulation
	vector<int> dp(n+1, INT_MIN);
	int ans = solveTab(n,x,y,z,dp);

	if(ans < 0)
	return 0;

	return ans;

}

//space optimisation not possible
