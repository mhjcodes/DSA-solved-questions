class Solution {
public:
    int solve(int curr, vector<int> &nums, int n, int prev, vector<vector<int>> &dp){
        // base case
        if(curr > n-1)
        return 0;

        if(dp[curr][prev+1] != -1)
        return dp[curr][prev+1];

        int incl;
        // for including
        if( prev == -1 || nums[prev] < nums[curr]){
            incl = 1+ solve(curr+1, nums, n, curr, dp);

        }
        else
        incl = solve(curr+1, nums, n, prev, dp);

        // for excluding
        int excl = solve(curr+1, nums, n, prev, dp);

        int ans = max(incl, excl);
        dp[curr][prev+1] = ans;
        return dp[curr][prev+1];

    }
    int solveTab(vector<int> &nums, int n){
        vector<vector<int>> dp(n+1, vector<int>(n+1, 0));
        for(int curr = n-1; curr>= 0; curr--){
            for(int prev= curr-1; prev>=-1; prev--){
            int incl;
            // for including
            if( prev == -1 || nums[prev] < nums[curr]){
                incl = 1+ dp[curr+1][curr+1];

            }
            else
            incl = dp[curr+1][prev+1];

            // for excluding
            int excl = 0 + dp[curr+1][prev+1];

            int ans = max(incl, excl);
            dp[curr][prev+1] = ans;
            }
        }
        return dp[0][0];
    }
    int solveOpt(vector<int> &nums, int n){
        vector<int> currArr(n+1, 0);
        vector<int> nextArr(n+1, 0);
        for(int curr = n-1; curr>= 0; curr--){
            for(int prev= curr-1; prev>=-1; prev--){
            int incl;
            // for including
            if( prev == -1 || nums[prev] < nums[curr]){
                incl = 1+ nextArr[curr+1];

            }
            else
            incl = nextArr[prev+1];

            // for excluding
            int excl = 0 + nextArr[prev+1];

            int ans = max(incl, excl);
            currArr[prev+1] = ans;
            }
            // shift logic
            nextArr = currArr;
        }
        return nextArr[0];

    }
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        //vector<vector<int>> dp(n+1, vector<int>(n+1, -1));            // for prev 0 to n
        //return solve(0, nums, n, -1, dp);

        //return solveTab(nums, n);
        return solveOpt(nums, n);

        
    }
};
