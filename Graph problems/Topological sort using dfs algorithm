#include <bits/stdc++.h> 
using namespace std;
void topodfssolve(int node, unordered_map<int, set<int>> &adj, unordered_map<int, bool> &visited, stack<int> &stack) {
    visited[node] = true;
    for(auto neighbour : adj[node]){
        if (!visited[neighbour]){
            topodfssolve(neighbour, adj,visited, stack);
        }
    }
    stack.push(node);
}
vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
    unordered_map<int, bool> visited;
    unordered_map<int, set<int>> adj;
    vector<int> ans;
    stack<int> stack;

    // Build adjacency list
    for (int i = 0; i < e; i++) {
        int u = edges[i][0];
        int v = edges[i][1];
        adj[u].insert(v);
    }
    // call dfs topological sort function for all components
    for(int i = 0; i < v; i++) {
        if(!visited[i]) {
            topodfssolve(i, adj, visited, stack);
        }
    }
    while(!stack.empty()){
        ans.push_back(stack.top());
        stack.pop();
    }
    return ans;

}
