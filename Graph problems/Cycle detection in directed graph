#include <bits/stdc++.h>
using namespace std;

bool dfssolve(int node, unordered_map<int, set<int>> &adj, unordered_map<int, bool> &visited, vector<int> &dfstracker) {
    visited[node] = true;
    dfstracker[node] = true;

    for (auto neighbour : adj[node]) {
        if (!visited[neighbour]) {
            bool cycleDetect = dfssolve(neighbour, adj, visited, dfstracker);
            if (cycleDetect) {
                return true;
            }
        } 
        else if (dfstracker[neighbour]) {
            return true;
        }
    }
    dfstracker[node] = false;
    return false;
}

int detectCycleInDirectedGraph(int n, vector<pair<int, int>> &edges) {
    unordered_map<int, bool> visited;
    unordered_map<int, set<int>> adj;
    vector<int> dfstracker(n + 1, 0);

    // Build adjacency list
    for (int i = 0; i < edges.size(); i++) {
        int u = edges[i].first;
        int v = edges[i].second;
        adj[u].insert(v);
    }

    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            bool ans = dfssolve(i, adj, visited, dfstracker);
            if (ans) 
            return true;
        }
    }
    return false;
}
