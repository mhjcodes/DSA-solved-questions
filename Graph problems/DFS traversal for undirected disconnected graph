#include<bits/stdc++.h>
void solve(unordered_map<int, set<int>> &adj, vector<int> &component, unordered_map<int, bool> &visited, int i){
    component.push_back(i);
    visited[i] = 1;
    
    if(!adj[i].empty()){
        for(auto j : adj[i]){
            if (!visited[j]){
                solve(adj, component, visited, j);
            }
        }
    }
}
vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    // building adj list from edges to make graph
    unordered_map<int, set<int>> adj;                 // used set to order elements in sorted order
    for(int i=0; i<edges.size(); i++){
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].insert(v);
        adj[v].insert(u);   // for undirected graph
    }

    vector<vector<int>> ans;
    unordered_map<int, bool> visited;
    for(int i=0; i<V; i++){
        if(!visited[i]){
            vector<int> component;
            solve(adj, component, visited, i);
            ans.push_back(component);
        }
    }
    return ans;
}
