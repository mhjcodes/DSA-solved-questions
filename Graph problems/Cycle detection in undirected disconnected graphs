#include<bits/stdc++.h>
bool bfssolve( int i, unordered_map<int, set<int>> &adj, unordered_map<int, int> &parent, unordered_map<int, bool> &visited){
    queue<int> q;
    q.push(i);
    visited[i] = 1;
    parent[i] = -1;
    while(!q.empty()){
        int front = q.front();
        q.pop();
        if(!adj[front].empty()){
            for(auto neighbour: adj[front]){
                if(!visited[neighbour]){
                    visited[neighbour] = 1;
                    q.push(neighbour);
                    parent[neighbour] = front;
                }
                else if(visited[neighbour] && parent[front] != neighbour)
                return 1;
            }
        }

    }
    return 0;
} 
bool dfssolve( int node, int parent, unordered_map<int, set<int>> &adj, unordered_map<int, bool> &visited, bool cycleDetect){
    visited[node] = 1;
    if(!adj[node].empty()){
        for(auto neighbour : adj[node]){
            if (!visited[neighbour]) {
                bool cycleDetect = dfssolve(neighbour, node, adj, visited, cycleDetect);
                if(cycleDetect)
                return 1;
            }
            else if(neighbour != parent)
            return 1;
        }
        return 0;
    }
    return 0;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // for loop detection, extra parent tracking is needed + visited data
    //unordered_map<int, int> parent;           // for bfssolve
    unordered_map<int, bool> visited;
    unordered_map<int, set<int>> adj;

    //buildAdjList
    for(int i=0; i<m; i++){
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].insert(v);
        adj[v].insert(u);
    }

    // for disconnected graph
    for(int i =0; i<n ; i++){
        if(!visited[i]){
            bool ans =  dfssolve(i, -1, adj, visited, 0);                                              //bfssolve(i, adj, parent, visited);
            if(ans)
            return "Yes";
        }
    }
    return "No";
}
